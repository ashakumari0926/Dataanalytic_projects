# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hjj8kUcVXkKH-1YQd_3KDgMTqS4vHexF

**Title of Project**
  Bank customer Churn Prediction

**Objective**
Predict whether a customer will churn based on various features.

Data Source
  'https://github.com/YBIFoundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv'

Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.ensemble import RandomForestClassifier

"""Import Data"""

df= pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')

"""Describe Data"""

df.info()

df.head()

df.describe()

df.shape

df.columns

"""Data Visualization"""

#Plotting histograms for numerical columns

df.hist(bins=30, figsize=(20, 15))
plt.show()

# Plotting correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, fmt=".2f")
plt.show()



"""                        Data Preprocessing

"""

# Handling categorical variables
df = pd.get_dummies(df, columns=['Geography', 'Gender'], drop_first=True)

# Drop columns that are not useful for prediction
df.drop(['CustomerId', 'Surname'], axis=1, inplace=True)

# Define Target Variable (y) and Feature Variables (X)
X = df.drop('Churn', axis=1)
y = df['Churn']

# Train Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ensure all features are numeric before scaling
print(X_train.dtypes)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Modeling"""

# Using Logistic Regression as a base model
log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train, y_train)

# Model Evaluation
y_pred_log_reg = log_reg.predict(X_test)
print("Logistic Regression")
print(confusion_matrix(y_test, y_pred_log_reg))
print(classification_report(y_test, y_pred_log_reg))
print("Accuracy:", accuracy_score(y_test, y_pred_log_reg))

# Using Random Forest Classifier
rf_clf = RandomForestClassifier(random_state=42)
rf_clf.fit(X_train, y_train)

# Model Evaluation
y_pred_rf = rf_clf.predict(X_test)
print("Random Forest Classifier")
print(confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

# Prediction
# Example prediction using Random Forest model
sample_data = [[619, 'France', 'Female', 42, 2, 0.00, 1, 1, 1, 101348.88]]  # Sample data
sample_df = pd.DataFrame(sample_data, columns=['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance', 'Num Of Products', 'Has Credit Card', 'Is Active Member', 'Estimated Salary'])
sample_df = pd.get_dummies(sample_df, columns=['Geography', 'Gender'], drop_first=True)

# Aligning the sample data columns with the training data columns
sample_df = sample_df.reindex(columns=X.columns, fill_value=0)
sample_scaled = scaler.transform(sample_df)
prediction = rf_clf.predict(sample_scaled)
print("Sample Prediction:", prediction)

"""Model Explanation

Sample Prediction: [0]:

This means the model predicts that the sample customer will not churn. The [0] indicates the class label assigned by the model, where 0 typically denotes "no churn" and 1 denotes "churn".

Warning Resolution:

The warning about feature names arises because StandardScaler was fitted on an array without feature names. To resolve this, we ensure the same data type (numpy array) is used both when fitting and transforming the scaler.

How the Prediction is Made:
The sample customer data is prepared by aligning it with the training data's structure.
The data is then scaled using the already fitted StandardScaler.
The model uses the processed sample data to make a prediction.
In this case, the model predicted that the customer would not churn, denoted by [0].
"""